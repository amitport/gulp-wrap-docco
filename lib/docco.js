// Generated by CoffeeScript 1.7.1
(function() {
  var ext, fs, highlightjs, l, languages, marked, path;

  fs = require('fs');

  path = require('path');

  marked = require('marked');

  highlightjs = require('highlight.js');

  highlightjs.configure({
    tabReplace: '  '
  });

  marked.setOptions({
    smartypants: true
  });

  languages = JSON.parse(fs.readFileSync("" + __dirname + "/languages.json"));

  for (ext in languages) {
    l = languages[ext];
    l.commentMatcher = RegExp("^\\s*" + l.symbol + "\\s?");
    l.commentFilter = /(^#![/]|^\s*#\{)/;
  }

  module.exports = function(filename, contents) {
    var code, codeExt, codeLang, codeText, docsText, hasCode, i, isText, language, line, lines, match, maybeCode, save, section, sections, _i, _j, _k, _len, _len1, _len2;
    ext = path.extname(filename);
    language = languages[ext];
    if (!language) {
      throw new Error('Docco cannot find a language associated with files with a \'' + ext + '\' extension');
    }
    if (language && language.name === 'markdown') {
      codeExt = path.extname(path.basename(filename, ext));
      if (codeExt && (codeLang = languages[codeExt])) {
        language = {
          name: codeLang.name,
          symbol: codeLang.symbol,
          literate: true
        };
      }
    }
    lines = contents.split('\n');
    sections = [];
    hasCode = docsText = codeText = '';
    save = function() {
      sections.push({
        docsText: docsText,
        codeText: codeText
      });
      return hasCode = docsText = codeText = '';
    };
    if (language.literate) {
      isText = maybeCode = true;
      for (i = _i = 0, _len = lines.length; _i < _len; i = ++_i) {
        line = lines[i];
        lines[i] = maybeCode && (match = /^([ ]{4}|[ ]{0,3}\t)/.exec(line)) ? (isText = false, line.slice(match[0].length)) : (maybeCode = /^\s*$/.test(line)) ? isText ? language.symbol : '' : (isText = true, language.symbol + ' ' + line);
      }
    }
    for (_j = 0, _len1 = lines.length; _j < _len1; _j++) {
      line = lines[_j];
      if (line.match(language.commentMatcher) && !line.match(language.commentFilter)) {
        if (hasCode) {
          save();
        }
        docsText += (line = line.replace(language.commentMatcher, '')) + '\n';
        if (/^(---+|===+)$/.test(line)) {
          save();
        }
      } else {
        hasCode = true;
        codeText += line + '\n';
      }
    }
    save();
    marked.setOptions({
      highlight: function(code, lang) {
        lang || (lang = language.name);
        if (highlightjs.getLanguage(lang)) {
          return highlightjs.fixMarkup(highlightjs.highlight(lang, code).value);
        } else {
          console.warn("docco: couldn't highlight code block with unknown language '" + lang + "' in " + source);
          return code;
        }
      }
    });
    for (i = _k = 0, _len2 = sections.length; _k < _len2; i = ++_k) {
      section = sections[i];
      code = highlightjs.fixMarkup(highlightjs.highlight(language.name, section.codeText).value);
      code = code.replace(/\s+$/, '');
      section.codeHtml = "<div class='highlight'><pre>" + code + "</pre></div>";
      section.docsHtml = marked(section.docsText);
    }
    return {
      sections: sections
    };
  };

}).call(this);
